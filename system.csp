---------------system---------------
STATES = {1..5}
channel state, signal,monitor, execute : STATES
channel next

-- ambiente de execucao do sistema
S = state?i -> signal!i -> ( next -> S [] execute?x -> Sidx(x) )
Sidx(i) = state.i -> signal!i -> ( next -> S [] execute?x -> Sidx(x))

-----------end system---------------

---------------system properties---------------
-- propriedade geral
-- todos os estados que o sistema pode ter
-- durante a execucao do sistema essa modelo nao e permitido
S1 = state.1 -> signal.1 -> state.2 -> signal.2 -> (S1 [] state.3 -> signal.3 -> (state.4 -> signal.4 -> S1 [] state.5 -> signal.5 -> S1))
-- possiveis estados do sistema derivados de S1
S2 = state.1 -> signal.1 -> state.2 -> signal.2 -> state.3 -> signal.3 -> state.5 -> signal.5 -> S2
S3 = state.1 -> signal.1 -> state.2 -> signal.2 -> S3
S4 = state.1 -> signal.1 -> state.2 -> signal.2 -> state.3 -> signal.3 -> state.4 -> signal.4 -> S4

Au = S [|{|signal, execute, next|}|] Autonomic

assert Au :[deadlock free]
assert Au :[deterministic]
assert Au :[divergence free]
assert S1 [T= S2
assert S1 [T= S3
assert S1 [T= S4

assert S1 [F= S2

assert S \ {|execute, next|} [T= S1
TO_HIDE = {|symptom_detect, change_plan, apply, next, execute, monitor |}
assert Au \ TO_HIDE [T= S1
assert Au \ TO_HIDE [T= S2
assert Au \ TO_HIDE [T= S3
assert Au \ TO_HIDE [T= S4

---------------end system properties---------------

---------------autonomic manager---------------
datatype SPT = sym.{cond | cond <- STATES}
datatype CHANGE_PLAN = change.{p | p <- {1..5}}

-- descrever quais eventos sao capturados pelo gerente autonomico
--
-- sym.[evento] 
--
-- cada sym.[evento] corresponde a um sintoma que ativa a adaptacao
--

-- associacao entre os eventos capturados e as mudancas que devem ser feitas
-- para cada evento capturado uma mudança deve ser associada
-- 
-- sym.[evento] => change.[mudanca]
--

-- associacao entre as mundancas e a acao a ser realizada
-- cada acao altera o estado do sistema
-- para cada mudanca descrita no modelo deve ter uma acao associada
--
-- change.[mudanca] => [acao]
-- cada acao e um estado do sistema monitorado

---------------Knowledge Base---------------
-- S2
--SYMPTOMS = {sym.2, sym.3}
--CHANGES = (| sym.2 => change.1, sym.3 => change.2 |)
--ACTIONS = (| change.1 => 3, change.2 => 5 |)
-- S3
--SYMPTOMS = {sym.2}
--CHANGES = (| sym.2 => change.1 |)
--ACTIONS = (| change.1 => 1 |)
-- S4
SYMPTOMS = {sym.2, sym.3}
CHANGES = (| sym.2 => change.1, sym.3 => change.2 |)
ACTIONS = (| change.1 => 3, change.2 => 4 |)
---------------end knowledge Base---------------
channel symptom_detect: SPT
channel change_plan : CHANGE_PLAN
channel apply : STATES

check(n) = {s | s <- inter({sym.n},SYMPTOMS), member(sym.n,SYMPTOMS)}
Monitor = signal?s -> monitor.s -> if empty(check(s)) then next -> Monitor else symptom_detect!head(seq(check(s))) -> Monitor

request_change(n) = mapLookup(CHANGES,n)
Analizer = symptom_detect?s -> if member(s, SYMPTOMS) then change_plan!request_change(s) -> Analizer else Analizer

Planner = change_plan?cp -> (mapMember(ACTIONS, cp)) & apply!mapLookup(ACTIONS,cp) -> Planner 

Executor = apply?cp -> execute!cp -> Executor 


Autonomic = ((Monitor [|{|symptom_detect|}|] Analizer) [|{|change_plan|}|] Planner) [|{|apply|}|] Executor

assert Autonomic :[deadlock free]
assert Autonomic :[deterministic]

--
-- monitor.[n]
-- execute.[m]
A(n,m) = monitor.n -> execute.m -> A(n,m)
B(m,n) = execute.m -> monitor.n -> B(m,n)
assert Autonomic \ {|signal, symptom_detect, change_plan, apply|} [T= A(3,4)
assert Autonomic \ {|signal, symptom_detect, change_plan, apply|} [T= B(4,3)
---------------autonomic manager---------------
